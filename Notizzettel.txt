Modern C++

Peter Loos

Guten Morgen

========================

a) Visual Studio / Eclipse

b) Übungen

c) Github

========================

12.15 bis 12.30

========================

==> Inhalt

a) Agenda

b) Fragerunde:

== Was sind die Erwartungen an dieses Seminar
== Überblick / Muss ab nächster Woche in Modern C++ programmieren
   Classic C++  => Modern C++
== Was MUSS drin sein
== Multithreading: Yes
== Welche anderen Sprachen kenne / kann ich ? 

   (  C# (.NET), Java, JavaScript, Python )

Fragen stellen !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

C++ ist eine SEHR UMFANGREICHE Sprache (geworden)

C++ Class ===> C++ 17  (  C++ 20 ... )

Compiler: Gcc auf Linux

Qt als Oberfläche

C#, Java:
    
      == Reference based Language (Heap - basiert)
   
C++:

      == Stack based Language
      == Reference based Language (Heap - basiert) // new

Stack based Language: Kopien 

C++ :  Performanz !!!

       Vorsicht: Unnütze Kopien

===============================================

Merkzettel:

emplace

noexcept: Wozu

Geschachtelte Struktur: Initialisierung

===============================================

RValue / LValue ==============> Move - Semantik

===============================================

Move-Semantik:

==:  .... E0   // wird freigegegen
==:  .... B0


Zweiter Durchlauf:

==:  .... B0  


Alternative Technik: Ab C++ 11 : emplace

===============================================

C++: 

Paradigmen:

== Objekt-Orientierte Sprache     // Bjarne Stroustrup
== Generische Sprache (Templates) // Alexander Alexandrowitsch Stepanow

Bibliothek: STL  // Standard Template Library

std::vector<int> zahlen;

std::vector<BigData> zahlen;

===============================================

Historie:

Funktionen als Parameter in C++

STL:   std::find_if

a) C-Funktion

b) Aufrufbares Objekt


===============================================

Initialisierung:

== Wurde überarbeitet

===============================================

std::initializer_list<T>:  STACK
std::vector<T>:            HEAP


std::initializer_list<int>:

Kein Vollwertiger STL_Container:  Leichtgewichtig // Lightweight

3 Methoden: begin, end, size

======================================

std::vector<int> vec1{ 10 };    // Groesse 1: Erstes Elemente = 10

std::vector<int> vec2( 10 );    // Groesse 10: Alle Elemente = 0

======================================
