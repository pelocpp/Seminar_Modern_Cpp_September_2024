Modern C++

Peter Loos

Guten Morgen

========================

peter.loos@gmx.de

https://github.com/pelocpp

https://peterloos.de/


========================

a) Visual Studio / Eclipse

b) Übungen

c) Github

========================

12.15 bis 12.30

========================

==> Inhalt

a) Agenda

b) Fragerunde:

== Was sind die Erwartungen an dieses Seminar
== Überblick / Muss ab nächster Woche in Modern C++ programmieren
   Classic C++  => Modern C++
== Was MUSS drin sein
== Multithreading: Yes
== Welche anderen Sprachen kenne / kann ich ? 

   (  C# (.NET), Java, JavaScript, Python )

Fragen stellen !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

C++ ist eine SEHR UMFANGREICHE Sprache (geworden)

C++ Class ===> C++ 17  (  C++ 20 ... )

Compiler: Gcc auf Linux

Qt als Oberfläche

C#, Java:
    
      == Reference based Language (Heap - basiert)
   
C++:

      == Stack based Language
      == Reference based Language (Heap - basiert) // new

Stack based Language: Kopien 

C++ :  Performanz !!!

       Vorsicht: Unnütze Kopien

===============================================

Merkzettel:

emplace

noexcept: Wozu

Geschachtelte Struktur: Initialisierung

Modul-Technik

explicit

===============================================

RValue / LValue ==============> Move - Semantik

===============================================

Move-Semantik:

==:  .... E0   // wird freigegegen
==:  .... B0


Zweiter Durchlauf:

==:  .... B0  


Alternative Technik: Ab C++ 11 : emplace

===============================================

C++: 

Paradigmen:

== Objekt-Orientierte Sprache     // Bjarne Stroustrup
== Generische Sprache (Templates) // Alexander Alexandrowitsch Stepanow

Bibliothek: STL  // Standard Template Library

std::vector<int> zahlen;

std::vector<BigData> zahlen;

===============================================

Historie:

Funktionen als Parameter in C++

STL:   std::find_if

a) C-Funktion

b) Aufrufbares Objekt


===============================================

Initialisierung:

== Wurde überarbeitet

===============================================

std::initializer_list<T>:  STACK
std::vector<T>:            HEAP


std::initializer_list<int>:

Kein Vollwertiger STL_Container:  Leichtgewichtig // Lightweight

3 Methoden: begin, end, size

======================================

std::vector<int> vec1{ 10 };    // Groesse 1: Erstes Elemente = 10

std::vector<int> vec2( 10 );    // Groesse 10: Alle Elemente = 0

======================================

Was ist das Problem mit 'new' ???

Wo ist das 'delete' ???

a) keines: schlecht
b) zweimal: Absturz

Smart Pointer:

Worum geht es ??????????????????????

Idee:

a) Es gibt Klassen und Objekte, Konstruktoren und Destruktoren.

b) Konstruktoren und Destruktoren:

   Sie werden 'deterministisch' aufgerufen: 

   Konstruktor: Bei der Objekterzeugung
   Destruktor:  Wenn das Objekt aus dem Scope fällt.

                Wenn die Methode / Funktion verlassen wird.

c) Idee: Man hat einen Zeiger und platziert diesen
         in einem Hüllenobjekt // Wrapper

   Konstruktor: Bei der Objekterzeugung  // da könnte man den Zeiger übergeben
   Destruktor:  Hier könnte man DELETE aufrufen

d) auto_ptr:    Nachteile // deprecated

e) std::unique_ptr
   std::shared_ptr
   std::weak_ptr

Unterschiedliche Strategien:

i) std::unique_ptr

   Zu einem Zeitpunkt im Programmablauf kann ein unique_ptr
   nur EINEN Besitzer haben.

ii) std::shared_ptr

   Zu einem Zeitpunkt im Programmablauf kann ein shared_ptr
   MEHRERE Besitzer haben.

iii) std::weak_ptr:
   Unterstützt den std::shared_ptr

====================================================

Klasse Time  // Uhrzeit

void func ()
{
    Time now;
}

A) C# / Java

void func_Java_C# ()
{
    Time now;  // das ist KEIN Objekt, nur eine leere Referenz

    Time now = new Time (...);  // das ist ein OBJEKT !!! Am Heap

    // Garbage Collector
}

B) C++

void func_Cpp ()
{
    Time now;   // das ist ein OBJEKT !!! Am Stack

    Time* than = new Time (...);// das ist ein OBJEKT !!! Am Heap

    delete than;
}


C) C++

void func ()
{
    Time now;   // Default-Konstruktor
    // ...
}   //          // Destruktor an now


=================================================

new     // delete

fopen   // fclose

Zweckentfremden

=================================================

Roter Faden =======> 

shared_ptr  // weak_ptr

=================================================

constexpr  const 

C++  ===> Übersetzer abhandelt: 

     = Metaprogramming (Templates)
     = constexpr: feature ==> große Funktionalität ( Mini-Sprache a la C )
                              zur Übersetzungszeit behandelt.

                              ABER: Frage: Übersetzungszeit abhandeln.

                              Tabellen / Matrizen / Werte: Vorab bekannt sind.

=================================================

std::unique_ptr
std::shared_ptr

Neue Entwicklung:

Was wäre in einem ersten Ansatz die Vorzugslage für einen Smart-Pointer:
unique oder shared ?

Go for std::unique_ptr :  Frage: Wer ist der Besitzer / Owner !!!

Größere Programme: Kann komplex werden mit einem std::unique_ptr

Go for std::shared_ptr: Erst mal richtig.

Aber: Er funktioniert nicht immer :(  ???????????????????????????  Owner !!!

"Go for Smart Pointer"

std::weak_ptr: Why ????????????????????????????????????

Moral:

Wie setzen wir shared_ptr ein ?????

a) Ich verwenden einen shared_ptr, wenn ich das Objekt BESITZEN möchte.

   Ergänzung: shared_ptr wird in einem Container zusätzlich abgelegt.

b) Überlegung: Kann man von "alt nach neu" einfach ALLE klassischen Zeiger
   durch std::shared_ptr umsetzen ???? FALSCH !!!

c) Ich möchte ein Objekt verwenden
   (Graphisch visualisieren möchte, weil ich Daten benötige (Aktienkurs)),
   aber NICHT ein Besitzer sein / werden: std::weak_ptr:

   Was ist, wenn via lock ein nullptr zurück kommt:

   Diese Situtation muss handelbar sein :)

d) Je mehr weak_ptr, desto besser :)



Beispiel:

Observer-Pattern:

a) Event-Quelle: Source // Informationen

b) Event-Client: Interessenten für Änderungen an der Event-Quelle

i) Alles diese Objekte werden via std::shared_ptr angelegt.

ii) Die Ownership ist / wird geregelt.

iii) Ein Event-Client meldet sich an der Event-Quelle an:

    source.register (client);

    WIE SPEICHERT die SOURCE den Client ab ???

    shared- oder weak-ptr aufheben ????????????? WEAK-PTR

    Hmm, wenn Zugang zum Weakptr ==> nullptr ergibt: Source ignoriert diesen Client.


Smart Pointer: Sind nicht gaaaaaaaaaaaaaaaaaanz trivial : Doch, nach 1-2 Wochen sind sie es :)

'delete' // ===> Wer ist der Owner des Shared-Ptr's

"STL und Smart Pointer kennen sich"

Garbagge Collector Feeling

=======================================================================

Alt-Code: ==> Never change a running System.

Zeiger:  Verwaltung der Daten: Größerer Eingriff.

int* ip;    ==> std::shared_ptr<int>: NEIN  // Ownership

=======================================================================

Übung: Move-Semantik


=======================================================================

C++   Lexikon:

123

123.5f

123l

123ll

123_km

123_kilogramm   ==> int

123_kg

123_pound

0x00FF00_farbe  ==>  class Color
 
0x00FF00_rgb    ==>  class Color

int weight = 5_kg + 300_gramm;


class Weight
{
   Weight (int weight) : m_weigt(weight) {}

   int m_weigt;
}


Weight w(3_kg);



100_euro

"11:47:30"_uhrzeit

=> Inhalt der Zeichenkette parsen und in ein Objekt / Variable umwandeln

Operator ""   Literal Operator

              UDL  : user defined literal

Syntax von C++:   ....  operator"" _suffix ( params )    // suffix = kg, pound, ...

// ====================================================================

Klassiker:

int n;

......


// hat n einen gültigen Wert ??????????

if (n == 0) ...

if (n == -1) ...

if (n == -MaxInt) ...


int  n;
bool isValid;

C#:

int  n;
int? n;   // eine bool-Variable

C++:

std::optional<int>

========================================================

Arrays:

int zahlen[10];

versus

std::array<int, 10> zahlen;

Funktionaler Unterschied: Keiner.

Fixed Size Arrays.

Why ????????????????????????????????????

Unterschiede im Details.

a) Robustheit:

Falscher Index: C-Array:  Kann abstürzen, muss aber nicht // UB

                Undefined behaviour

Falscher Index: std::array:  

i)  Operator []:            Performanz - kein Check -  Kann abstürzen ....
ii) Methode at(int index):  Hier wird eine Exception geworfen.


UB: ===> Schwäche von C++ auf Grund der Komplexität von C++

b) Mehr OO: front, back

===================================================================

std::variant

Helfer-Klasse:

Ein std::variant-Objekt kann Werte unterschiedlichen Datentyps aufnehmen,
zu einem Zeitpunkt aber nur einen Datentyp.

==> union: Nein

Why ?????????????????????????????

Beispiel 1:

Excel-Sheet:   Zelle / Cell ==> Zahl, Zeichenkette, Datum, Currency, Gleitpunkt


Beispiel 2:

GameBoard:   Brett : Figuren:   board[2][2] = figur1, figur2, ....


==========================================================

std::tuple <char, int, double> moreValues{ 'Z', 987, 987.654 };

Womit hat ein Tuple Ähnlichkeit?

Mit einem struct !!!

Ein Tuple ist ein struct für Schreibfaule :)

==========================================================

Variadische Templates: C++ 11

Tool: Cpp Insights

Why ?????????????????????????????????????????????

a) makeXXX - Funktionen

b) emplace

==========================================================

Go - for - Emplace  :  pushback ==> emplace

C++ 11:  Parameter Pack:

... args   ==> mehrere Parameter können an einen Namen gebunden werden.

args ...   ==> aus mehreren Parametern wird eine komma-getrennte Liste generiert


Idee:  Trick: 

==========================================================

Templates und Parameter:

Wir haben ein Problem bei Call-by-Reference und 
temp. Objekten

Lösung:  "Perfektes Forwarding"

==========================================================

Klasse std::string        ===> new           (kleine Ausnahmen ....)



Konstante Zeichenketten:  "Window"  als Menüüberschrift

std::string s { "Window" };   ===> new  // Heap

const char* s = "Window";  

C:   char* s = "Window";  
C++: const char* s = "Window";  

NICHT: STACK, HEAP

WO DANN:  Data Segment // Code Segment 


std::string_view

#define   WINDOW    "Another Window"

constexpr const char* wp = "Another Window";

==> #define  : Preprozessor


void foo ()
{
   char* cp = WINDOW;
}



std::span:

// Anfangsadresse von Array oder Vektor
// Länge

std::string_view  // Anfangsadresse + Länge

VERSUS

const char* cp;   // Anfangsadresse 

==> Non - Owning Object: gilt auch für std::string_view 

==================================================

Performanz

std::string

new / Heap .... Hmmm, können wir das vermeiden 

a) std::string_view

b) Optimierung:  Kleine / kurze Zeichenketten legen
      wir DIREKT in einem std::string-Objekt ab: STACK

============================================================

Folding

int result = 1 + 2 + 3 + 4 + 5;

Wiederholte Ausführung desselben Operators:  +, -, << 

for: 

ABER: Folding  ===> Performanz

Viele Werte / Argumente: Folding Ausdruck  ===> Parameter Pack

Wiederholte Ausführung desselben Operators:  Komma-Operator

============================================================

Statischer versus dynamischer Polymorphismus

std::vector<int>

Homogener Container    ==> Alle Elemente im Container sind vom selben Typ

Heterogener Container  ==> Die Elemente im Container können unterschiedlichen
                           Typs sein.

Java: ArrayList : Typ Object

C#:   ArrayList : Typ Object

// =========================================================

Concepts and Requirements
-------------------------

int add(int a, int b)
{
    return a + b;
}

long add(long a, long b)
{
    return a + b;
}

// ------------------------------

template <typename T>
T add(T a, T b)
{
    return a + b;
}

Was kann T sein: ALLES

Hmm , wenn T nicht passt:  REAGIERENDES VERHALTEN.

// ------------------------------

template <typename T>
   requires MyConstraint<T>
T add(T a, T b)
{
    return a + b;
}

Was kann T sein: Nur das, was das MyConstraint erlaubt.

PROAKTIVES VERHALTEN.

=================================================

discarding return value of function with [[nodiscard]] attribute



===================================================

explicit

===================================================

Referenz Wrapper

===================================================


std::for_each 
versus
std::generate 

Unterschied:



std::generate(
    std::begin(zahlen6),
    std::end(zahlen6),
    [start = 10] () mutable {

        int value = start + 1;
        start++;
        return value;
    }
);

Gibt es hier eine Art "Vorgehensweise" / "Philosophie" in der STL  ????

Ja:

"Building Blocks"

"Baustein"

===================================================

Modul-Technik

C++ 20 // Hängt auch vom Compiler ab ....

===================================================

Multi-Threading:
----------------


std::thread   ============>  CreateThread

===================================================

Resource:


std::mutex:   Auf ein lock MUSS ein unlock folgen !!!!!!!!!!!!!!!!!


RAII : Resource Acquisition is Initialization

Ähnlich zu der Idee von Smart Pointern:    ==> Hüllen Klasse


===================================================


Threads als Objekt:

CreateThread:    Teure Funktion ===> Speicher (Belegt Ressources im Kernel) + Performanz

              WebServer:   Incoming Requests ===> CreateThread

              SocketServer:     Incoming Requests ===> CreateThread


Thread-Pool:  UNTERSCHIED:

         Ein Thread aus einem Pool kann MEHERE MALE verwendet werden.

         Die Funktion kann eine andere sein.


C++ + Thread-Pool ????

===================================================


Konkurrenz:     Konkurrierende Zugriff // Gegenseitig Ausschließen // Mutual Exclusion  // MutEx


Kooperation:   

== Ein Thread berechnet // produziert

== Ein Thread wartet auf Ergebnisse // konsumiert



C++:  Hilfsmittel 

Ab dem ersten Tag :  std::condition_variable

C++ 20:  std::semaphore

====================================================

std::jthread     joinable-State   ==> terminate

JThread: Joinable Thread

Wer hat ide Klasse geschrieben:  Nicolai Josuttis


====================================================

int n = 0;


a) Ich zähle n 1000 mal um 1 hoch

b) Ich zähle n 1000 mal um 1 runter


Wir machen das Hoch- und Runterzählen in VERSCHIEDENEN Threads. :)

Frage: Welchen Wert hat n ??



                ++m_counter;

00007FF6148F09F3  mov         rax,qword ptr [this]  
00007FF6148F09FA  mov         eax,dword ptr [rax]  
00007FF6148F09FC  inc         eax                                 plus 1 // EAX  // Akkumulator

// <=============================   Unterbrechung


================================ Es werden ALLE Register zwischengespeichert, auch EAX

Weiter geht: EAX wird restauriert ....................... mit einem veralteten Wert.

00007FF6148F09FE  mov         rcx,qword ptr [this]  
00007FF6148F0A05  mov         dword ptr [rcx],eax  

Problem: Lesen und Schreiben einer Speicherzelle sind NICHT Atomar // ein Befehl


==================================================

long counter;

bool ist ein int .... das Lesen und Schreiben kann bei 0 und 1 nicht kaputt gehen.

==================================================

Semaphore

==================================================

Nachrichtenwarteschlange: "All in"

Übung

== Nicht nur Daten abgelegt
== Funktionen abgelegt - sequentiell abgearbeitet werden

Beispiel:

Außen Ereignisse:

Alarme: Nicht verloren gehen // einzeln quttiert werden // Logging eingetragen werden.

Alarmschwall:  Ein Alarm // Kaskade 

C++ 11   // Zufall 

Zusammenspiel // Praxistouch

==================================================


std::mutex:

lock()
....   // function 
unlock()


Zwangsserialisierung   // Bremsen:  Performanz

Der geschütze Bereich könnte in einer Warteschlange zwischengespeichert werden.

====================================================
End-Of-File
====================================================
